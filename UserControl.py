#pragma config(Sensor, in1,    gyro,           sensorGyro)
#pragma config(Motor,  port1,           pLeft,         tmotorVex393_HBridge, openLoop, driveLeft)
#pragma config(Motor,  port10,          pRight,        tmotorVex393_HBridge, openLoop, driveRight)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX2)

//Global Variables
float error = 0; 

//methods-----------------------------------
void RightDrive(int speed){
	motor[pRight] = speed;}

void LeftDrive(int speed){
	motor[pLeft] = speed;}


//sub routines------------------------------
void arcadeDrive(){
	int motorPower = vexRT[Ch3];
	int turnPower = vexRT[Ch1];

	if (abs(vexRT[Ch3]) > 45){
		motor[pLeft] = motorPower;
		motor[pRight] = motorPower;}

	else if (abs(vexRT[Ch1]) > 45){                                                                                                                                                                                                                                                                   ;
		motor[pRight] = -turnPower;
		motor[pLeft] = turnPower;}

	else{
		motor[pLeft] = motor[pRight] = 0;}
}

void gyroTurn(float setPoint, float kP,float kI,float kD) {
	float errorTotal = 0;
     while(SensorValue[gyro] < setPoint) {
          // Calculate error
          float error = setPoint - SensorValue[gyro];
          errorTotal += error;
          float errorLast = error;

          // Find proportional term
          float pTerm = error * kP;
          // Find integral term
          float iTerm = kI * errorTotal;
          // Find derivative term
          float dTerm = kD * (error - errorLast);

          // Compute output to send to motors
          int power = pTerm + iTerm + dTerm;

          // Set your motor speeds
          LeftDrive(power);
          RightDrive(power);
     }
}
	
void autonomousSquare(int feet){
	int time = feet*900;
		for(int i=0; i<4; i++){
			LeftDrive(127);
			RightDrive(127);
			wait1Msec(time);
			LeftDrive(0);
			RightDrive(0);
			gyroTurn(90, 0.0289, 0, 0.001);
	}
}

//void auton2(int motorPower){}

//void auton3(int motorPower){}

///////////////////////////////////////
//////////////////MAIN/////////////////
///////////////////////////////////////
task main(){
	while(true){
		arcadeDrive();
	}
}
